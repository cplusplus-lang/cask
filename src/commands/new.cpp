#include <fmt/color.h>
#include <fmt/core.h>

#include <commands/help.hpp>
#include <commands/new.hpp>
#include <filesystem>
#include <fstream>
#include <iostream>
#include <string_view>

namespace fs = std::filesystem;

namespace new_cmd {

namespace {
[[nodiscard]] Result error_missing_path() {
  return help::fatal_error(fmt::format(
      R"(the following required arguments were not provided:
{}

{} {} {}

For more information, try '{}'
)",
      fmt::format(fg(help::blue) | fmt::emphasis::bold, "  <path>"),
      fmt::format(fg(help::green) | fmt::emphasis::bold, "Usage:"),
      fmt::format(fg(help::blue) | fmt::emphasis::bold, "cask new"),
      fmt::format(fg(help::blue), "<path>"),
      fmt::format(fg(help::blue) | fmt::emphasis::bold, "--help")));
}

[[nodiscard]] Result error_missing_path(const std::string_view project_name) {
  return help::fatal_error(fmt::format(
      R"(destination `{}` already exists

Use `cask init` to initialize the directory
)",
      fs::absolute(project_name).string()));
}
}  // namespace

Result run(const std::span<char *> args) {
  if (args.empty()) {
    return error_missing_path();
  }

  const auto project_name = args[0];

  if (fs::is_directory(project_name)) {
    return error_missing_path(project_name);
  }

  fs::path path{project_name};

  fs::create_directories(path);
  fs::create_directories(path / "src");

  std::ofstream main_file(path / "src" / "main.cpp");

  main_file << R"(#include <iostream>

int main() {
    std::cout << "Hello World!\n";
}
)";

  main_file.close();

  std::ofstream gitignore_file(path / ".gitignore");

  gitignore_file << R"(# Generated by Cask
# will have compiled files and executables
debug/
target/)";

  gitignore_file.close();

  std::ofstream cask_file(path / "Cask.toml");

  cask_file << fmt::format(R"([package]
name = "{}"
version = "0.1.0"
standard = "20"

[dependencies]
)",
                           project_name);

  cask_file.close();

  return fmt::format(
      R"(     {} binary (application) `{}` package
{} see more `Cask.toml` keys and their definitions at https://doc.cplusplus-lang.com/cask/reference/manifest.html
)",
      fmt::format(fg(fmt::color::light_green) | fmt::emphasis::bold, "Created"),
      project_name,
      fmt::format(fg(fmt::color::deep_sky_blue) | fmt::emphasis::bold,
                  "note:"));
}

}  // namespace new_cmd
